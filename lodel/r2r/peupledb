#!/usr/bin/perl -w
###########################################################################
#
#      peupledb version 0.1 Mars 2001
#
#      Copyright (C) 2001, Ghislain Picard
#
###########################################################################
#
# Ce script peut etre diffuse et modifie librement. Il est distribue
# dans le but d'etre utile, mais SANS GARANTIE.
#
###########################################################################

use strict;
use POSIX;

my @list_tags=("auteur","auteur2",
	       "titre",
	       "periode",
	       "cle",
	       "type",
	       "annee",
	       "publication",
	       "ordre",
	       "resume",
	       "resume_anglais",
	       "texte",
	       "texteapart",
	       "notebaspage");


my %periodes;
$periodes{'ANTI'}="-500:500";
$periodes{'MA'}="500:1492";
$periodes{'AR'}="1492:1789";
$periodes{'XVIII'}="1700:1799";
$periodes{'XIX'}="1789:1914";
$periodes{'XX'}="1900:2000";
$periodes{'AUJ'}="1945:2200";
$periodes{'TOUT'}="3000:3000";


###########################################################################
# main

use locale;

my $txt_file;
my $url;
my $infofile; # fichier ou on ajoute l'id
my %db;


&arguments;

print "transforme le fichier en xhtml\n";

(!system "../scripts/html2xhtml <$txt_file >$txt_file.xml") || die "erreur dans html2xhtml\n";

print "parcourt le fichier $txt_file.xml\n";
  
# recherche les tags
&parse_fic ("$txt_file.xml");
  
# recherche l'annee et le publication s'ils n'ont pas ete lu dans le fichier
&parse_nomfic unless $db{publication} ne "" && $db{annee} ne "" && $db{ordre} ne "";
print "insert l'article\n";
open (OUT,">$txt_file.xml");
print OUT "<r2r:article>\n";
&insert_article;
print "insert les auteurs\n";
&insert_auteur;
print "insert les periodes\n";
&insert_periode;
print "insert les mots cles\n";
&insert_motcle;
print OUT "</r2r:article>\n";
close(OUT);

# teste la validite xml


exit;

###########################################################################

sub arguments {
  
  if ($ARGV[0] eq "" || $ARGV[1] eq "") {
    print <<endHelp;
mkdb version 0.1 Fevrier 1999
Copyright (C) 1999, Ghislain Picard

peuple "fichier avec tags"
cree les entrees dans la base de donnee db a partir des tags du fichiers

endHelp
    exit;
  }
  $txt_file=$ARGV[1];
  $url=$ARGV[2] ? $ARGV[2] : $txt_file;
  $infofile=$ARGV[3] ? $ARGV[3] : $url;
}


###################################################

sub parse_fic {
  
  open (TXT,shift) || die "erreur: impossible d'ouvrir le fichier $txt_file en lecture";
  my $txt=join ("\n",<TXT>);
  close (TXT);

  study $txt;
  
  foreach my $tags (@list_tags) {
    ####print "-->$tags\n";
    if ($txt=~ /\(!--$tags--\)(.*?)\(!--\)/s) {
      my $champ=$1;
      study $champ;
      $champ=~ s/\n/ /gs;
      ####print "---> $champ\n";
      $champ=~ s/[\0-\37]/ /sg;	# remplace tout caractere <' ' par un espace
#      $champ=~ s/(<.*?>)/$a=$1; if ($a=~m;<\/?[IBU]>;i || $a=~m;<\/?SUP>;i) { $a;}/ge; # efface les sequences html sauf I,B,U et SUP
#      $champ=~ s/'/\&#39;/g;			# remplace ' par le code html correspondant
      $champ=~ s/\s\s/ /g;	# efface les doubles espaces
      $champ=~ s/^ //g;		# efface les espaces en debut
      $champ=~ s/ $//g;		# efface les espaces en fin
      
      $db{$tags}=$champ;
      print $tags," * ";
    } else {
      print "($tags) * ";
      $db{$tags}="";
    }
  }
  $db{'abstract'}=$db{'resume_anglais'};
  $db{'texte'}=$db{'texteapart'} unless $db{'texte'};
  
  unless ($db{'type'}) {
    if ($txt_file=~/cpte-rendu/) {
      $db{'type'}="compte rendu";
    } elsif ($txt_file=~/notes/) {
      $db{'type'}="note de lecture";
    } elsif ($txt_file=~/chroniques/) {
      $db{'type'}="chronique";
    } else {
      $db{'type'}="article";
    }
  }
  $db{'typedoc'}=$db{'type'};

  print "\n";
}

sub parse_nomfic {
  
  ## publication annee
  
  if ($txt_file=~/\/?(\d+)-(\d+)\/(\d+)\b/) {
    $db{publication}=int($1) unless $db{publication} ne "" ;
    $db{annee}=int($2) unless $db{annee} ne "" ;
    unless ($db{ordre} ne "") {
      $db{ordre}=int($3);
      if ($db{type} eq "note" || $db{type} eq "compte rendu" || $db{type} eq "chronique") {
	$db{ordre}=$db{ordre}*100+$1 if $txt_file=~/-(\d+)\.(html|txt)/;
	die ("erreur") unless $txt_file=~/-(\d+)\.(html|txt)/;
      }	
    }
  } else {
    die "le nom du fichier $txt_file ou du repertoire ne contient pas les informations de date\n";
  }

}


#############################
# insert_article

sub insert_article {

  my @metatags=(
		"annee",
		"publication",
		"ordre",
		"typedoc");

  my @corpstags=(
		 "resume",
		 "abstract",
		 "texte",
		 "notebaspage");

  # enleve les BR en debut et fin de tags
  foreach (keys %db)  {
    $db{$_}=~s/^(\s*<\/?BR>)+//i;
    $db{$_}=~s/(<\/?BR>\s*)+$//i;
  }

  print OUT "<r2r:meta><r2r:infoarticle>\n";
  foreach (@metatags) {
    print OUT "<r2r:$_>$db{$_}</r2r:$_>\n" if $db{$_};
  }
  print OUT "</r2r:infoarticle></r2r:meta>\n";

  print OUT "<r2r:grtitre><r2r:titre>$db{titre}</r2r:titre></r2r:grtitre>\n" if $db{titre};

  foreach (@corpstags) {
    print OUT "<r2r:$_>$db{$_}</r2r:$_>\n" if $db{$_};
  }
}


sub insert_auteur {
  
  my $auteur=$db{auteur};
  $auteur.=" ,".$db{auteur2} if $db{auteur2} ne "";
  
  unless ($auteur) {
    print "l'article n'a pas d'auteur\n";
    return 0;
  }
  
  my @auteur=split /,/,$auteur;
  my $level=1;

  print OUT "<r2r:grauteur>\n";
  
  foreach my $auteur (@auteur) {
    my $nom="";
    my $prenom1=$auteur;
    $prenom1=~s/<\/?[^>]+>//g;
    $prenom1=~s/\&nbsp\;?/ /g;
    $prenom1=~s/\s+$//g;
    my $prenom=$prenom1;

    while ($prenom=~/^(.*)(\s+([[:upper:]]|&\#39|-){2,})\s*$/g) {
      $prenom=$1;
      $nom="$2$nom";
    }
    $nom=~s/^\s+//g;		# efface les espaces en debut
    $prenom=~s/\s+$//g;		# efface les espaces en fin

    $prenom=lowercase_nom($prenom);
    $nom=lowercase_nom($nom);

    if ($nom eq "") {
      #$nom=lowercase_nom($prenom1);
      $nom=$auteur;
      $prenom="";
    }

    print OUT "<r2r:auteur ordre=\"$level\"><r2r:nompersonne><r2r:nomfamille>$nom</r2r:nomfamille><r2r:prenom>$prenom</r2r:prenom></r2r:nompersonne></r2r:auteur>\n";

    # ajoute le lien entre les auteurs et le document
    $level++;
  }
  print OUT "</r2r:grauteur>\n";
}


sub insert_periode {

  if ($db{'periode'}) {
    my @periode=split (/,/,$db{'periode'});

    print OUT "<r2r:grperiode>\n";
    foreach my $date (@periode) {
      $date=~ s/<.*?>//g;
      $date=~ s/(.)/\u$1/g;	# met en majuscule
      $date=~ s/^ +//g;		# enleve les espaces au debut
      $date=~ s/ +$//g;		# enleve les espaces en fin

      if (!$periodes{$date}) {
	die "erreur: la periode $date n'existe pas\n";
      }
      print OUT "<r2r:periode>$date</r2r:periode>\n";
    }
    print OUT "</r2r:grperiode>\n";
  }	
}


sub insert_motcle {

  if ($db{'cle'}) {
    my @motcle=split (/,/,$db{'cle'});
    print OUT "<r2r:grmotcle>\n";
    foreach my $mot (@motcle) {
#      $mot=~ s/(.)/\l$1/g;	# met en minuscule
      $mot=~ s/^ +//g;		# enleve les espaces en debut
      $mot=~ s/ +$//g;		# enleve les espaces en fin

      print OUT "<r2r:motcle>$mot</r2r:motcle>\n";
    }
    print OUT "</r2r:grmotcle>\n";
  }
}


sub lowercase_phrase {
  my ($l)=@_;
  
  $l=~ s/(\w)/$a=$1;if ($` =~ m;^&?$|[\.\?!] *$|_&?$; ) { "$a";} else { "\l$a";}/ge;
  $l=~ s/_//g;
  
  return $l;
}


sub lowercase_nom {
  my ($l)=@_;
  
  $l=~ s/(\w)/$a=$1;if ($` =~ m;^&?$|[_ -]$; ) { "$a";} else { "\l$a";}/ge;
  
  return $l;
}

